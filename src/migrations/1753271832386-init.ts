import { MigrationInterface, QueryRunner } from "typeorm";

export class Init1753271832386 implements MigrationInterface {
    name = 'Init1753271832386'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE TABLE "users" ("user_id" SERIAL NOT NULL, "user_name" character varying(60) NOT NULL, "user_email" character varying(200) NOT NULL, "user_password" character varying(100) NOT NULL, "user_address" character varying(100) NOT NULL, "user_phone_number" character varying(30) NOT NULL, "user_gender" character varying NOT NULL, "user_role" character varying NOT NULL DEFAULT 'customer', "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "UQ_643a0bfb9391001cf11e581bdd6" UNIQUE ("user_email"), CONSTRAINT "PK_96aac72f1574b88752e9fb00089" PRIMARY KEY ("user_id")); COMMENT ON COLUMN "users"."user_id" IS 'id del usuario, generado automaticamente, es unico por usuario'; COMMENT ON COLUMN "users"."user_name" IS 'nombre del usuario'; COMMENT ON COLUMN "users"."user_email" IS 'Correo del usuario, es unico'; COMMENT ON COLUMN "users"."user_password" IS 'contraseña del usuario'; COMMENT ON COLUMN "users"."user_address" IS 'Direccion del usuario'; COMMENT ON COLUMN "users"."user_phone_number" IS 'Numero de telefono del usuario'; COMMENT ON COLUMN "users"."created_at" IS 'Fecha y hora de creacion del usuario'; COMMENT ON COLUMN "users"."updated_at" IS 'Fecha y hora de actualizacion del usuario'`);
        await queryRunner.query(`CREATE TABLE "categories" ("category_id" SERIAL NOT NULL, "category_name" character varying(60) NOT NULL, "category_image" character varying(200) NOT NULL, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "PK_51615bef2cea22812d0dcab6e18" PRIMARY KEY ("category_id")); COMMENT ON COLUMN "categories"."category_id" IS 'id del usuario, generado automaticamente, es unico por usuario'; COMMENT ON COLUMN "categories"."category_name" IS 'nombre de la categoria'; COMMENT ON COLUMN "categories"."category_image" IS 'Imagen de la categoria'; COMMENT ON COLUMN "categories"."created_at" IS 'Fecha y hora de creacion de la categoria'; COMMENT ON COLUMN "categories"."updated_at" IS 'Fecha de última actualización del producto'`);
        await queryRunner.query(`CREATE TABLE "products" ("product_id" SERIAL NOT NULL, "product_name" character varying(60) NOT NULL, "product_price" integer NOT NULL, "product_description" character varying(100) NOT NULL, "product_image" character varying(100) NOT NULL, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), "category_id" integer, CONSTRAINT "PK_a8940a4bf3b90bd7ac15c8f4dd9" PRIMARY KEY ("product_id")); COMMENT ON COLUMN "products"."product_id" IS 'Producto, generado automaticamente, es unico por producto'; COMMENT ON COLUMN "products"."product_name" IS 'nombre del producto'; COMMENT ON COLUMN "products"."product_price" IS 'Precio del producto'; COMMENT ON COLUMN "products"."product_description" IS 'descripcion del producto'; COMMENT ON COLUMN "products"."product_image" IS 'Imagen del producto'; COMMENT ON COLUMN "products"."created_at" IS 'Fecha y hora de creacion del Producto'; COMMENT ON COLUMN "products"."updated_at" IS 'Fecha y hora de actualizacion del Producto'; COMMENT ON COLUMN "products"."category_id" IS 'id del usuario, generado automaticamente, es unico por usuario'`);
        await queryRunner.query(`CREATE TABLE "order_product" ("id" SERIAL NOT NULL, "amount" integer NOT NULL, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), "order_id" integer, "product_id" integer, CONSTRAINT "PK_539ede39e518562dfdadfddb492" PRIMARY KEY ("id")); COMMENT ON COLUMN "order_product"."id" IS 'id de la linea de pedido, generado automaticamente'; COMMENT ON COLUMN "order_product"."amount" IS 'Cantidad del producto en esta linea de pedido'; COMMENT ON COLUMN "order_product"."created_at" IS 'Fecha y hora de creacion del Producto'; COMMENT ON COLUMN "order_product"."updated_at" IS 'Fecha y hora de actualizacion del Producto'; COMMENT ON COLUMN "order_product"."order_id" IS 'identificador único para cada orden de compra'; COMMENT ON COLUMN "order_product"."product_id" IS 'Producto, generado automaticamente, es unico por producto'`);
        await queryRunner.query(`CREATE TABLE "orders" ("order_id" SERIAL NOT NULL, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), "customer_id" integer, CONSTRAINT "PK_cad55b3cb25b38be94d2ce831db" PRIMARY KEY ("order_id")); COMMENT ON COLUMN "orders"."order_id" IS 'identificador único para cada orden de compra'; COMMENT ON COLUMN "orders"."created_at" IS 'Fecha y hora de creacion del Producto'; COMMENT ON COLUMN "orders"."updated_at" IS 'Fecha y hora de actualizacion del Producto'`);
        await queryRunner.query(`CREATE TABLE "customers" ("id" SERIAL NOT NULL, "customerName" character varying(20) NOT NULL, "customerLastName" character varying(30) NOT NULL, "customerPhone" character varying, "created_at" TIMESTAMP NOT NULL DEFAULT now(), "updated_at" TIMESTAMP NOT NULL DEFAULT now(), "userId" integer, CONSTRAINT "REL_b8512aa9cef03d90ed5744c94d" UNIQUE ("userId"), CONSTRAINT "PK_133ec679a801fab5e070f73d3ea" PRIMARY KEY ("id")); COMMENT ON COLUMN "customers"."created_at" IS 'Fecha y hora de creacion del usuario'; COMMENT ON COLUMN "customers"."updated_at" IS 'Fecha y hora de actualizacion del usuario'; COMMENT ON COLUMN "customers"."userId" IS 'id del usuario, generado automaticamente, es unico por usuario'`);
        await queryRunner.query(`ALTER TABLE "products" ADD CONSTRAINT "FK_9a5f6868c96e0069e699f33e124" FOREIGN KEY ("category_id") REFERENCES "categories"("category_id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "order_product" ADD CONSTRAINT "FK_ea143999ecfa6a152f2202895e2" FOREIGN KEY ("order_id") REFERENCES "orders"("order_id") ON DELETE SET NULL ON UPDATE CASCADE`);
        await queryRunner.query(`ALTER TABLE "order_product" ADD CONSTRAINT "FK_400f1584bf37c21172da3b15e2d" FOREIGN KEY ("product_id") REFERENCES "products"("product_id") ON DELETE SET NULL ON UPDATE CASCADE`);
        await queryRunner.query(`ALTER TABLE "orders" ADD CONSTRAINT "FK_772d0ce0473ac2ccfa26060dbe9" FOREIGN KEY ("customer_id") REFERENCES "customers"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "customers" ADD CONSTRAINT "FK_b8512aa9cef03d90ed5744c94d7" FOREIGN KEY ("userId") REFERENCES "users"("user_id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "customers" DROP CONSTRAINT "FK_b8512aa9cef03d90ed5744c94d7"`);
        await queryRunner.query(`ALTER TABLE "orders" DROP CONSTRAINT "FK_772d0ce0473ac2ccfa26060dbe9"`);
        await queryRunner.query(`ALTER TABLE "order_product" DROP CONSTRAINT "FK_400f1584bf37c21172da3b15e2d"`);
        await queryRunner.query(`ALTER TABLE "order_product" DROP CONSTRAINT "FK_ea143999ecfa6a152f2202895e2"`);
        await queryRunner.query(`ALTER TABLE "products" DROP CONSTRAINT "FK_9a5f6868c96e0069e699f33e124"`);
        await queryRunner.query(`DROP TABLE "customers"`);
        await queryRunner.query(`DROP TABLE "orders"`);
        await queryRunner.query(`DROP TABLE "order_product"`);
        await queryRunner.query(`DROP TABLE "products"`);
        await queryRunner.query(`DROP TABLE "categories"`);
        await queryRunner.query(`DROP TABLE "users"`);
    }

}
